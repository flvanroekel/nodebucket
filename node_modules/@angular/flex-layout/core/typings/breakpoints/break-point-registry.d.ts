import { BreakPoint } from './break-point';
import * as ɵngcc0 from '@angular/core';
export declare type OptionalBreakPoint = BreakPoint | null;
/**
 * Registry of 1..n MediaQuery breakpoint ranges
 * This is published as a provider and may be overridden from custom, application-specific ranges
 *
 */
export declare class BreakPointRegistry {
    readonly items: BreakPoint[];
    constructor(list: BreakPoint[]);
    /**
     * Search breakpoints by alias (e.g. gt-xs)
     */
    findByAlias(alias: string): OptionalBreakPoint;
    findByQuery(query: string): OptionalBreakPoint;
    /**
     * Get all the breakpoints whose ranges could overlapping `normal` ranges;
     * e.g. gt-sm overlaps md, lg, and xl
     */
    readonly overlappings: BreakPoint[];
    /**
     * Get list of all registered (non-empty) breakpoint aliases
     */
    readonly aliases: string[];
    /**
     * Aliases are mapped to properties using suffixes
     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'
     * for property layoutGtSM.
     */
    readonly suffixes: string[];
    /**
     * Memoized lookup using custom predicate function
     */
    private findWithPredicate;
    /**
     * Memoized BreakPoint Lookups
     */
    private readonly findByMap;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreakPointRegistry>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BreakPointRegistry>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyIsInNvdXJjZXMiOlsiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnJlYWtQb2ludCB9IGZyb20gJy4vYnJlYWstcG9pbnQnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBPcHRpb25hbEJyZWFrUG9pbnQgPSBCcmVha1BvaW50IHwgbnVsbDtcbi8qKlxuICogUmVnaXN0cnkgb2YgMS4ubiBNZWRpYVF1ZXJ5IGJyZWFrcG9pbnQgcmFuZ2VzXG4gKiBUaGlzIGlzIHB1Ymxpc2hlZCBhcyBhIHByb3ZpZGVyIGFuZCBtYXkgYmUgb3ZlcnJpZGRlbiBmcm9tIGN1c3RvbSwgYXBwbGljYXRpb24tc3BlY2lmaWMgcmFuZ2VzXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCcmVha1BvaW50UmVnaXN0cnkge1xuICAgIHJlYWRvbmx5IGl0ZW1zOiBCcmVha1BvaW50W107XG4gICAgY29uc3RydWN0b3IobGlzdDogQnJlYWtQb2ludFtdKTtcbiAgICAvKipcbiAgICAgKiBTZWFyY2ggYnJlYWtwb2ludHMgYnkgYWxpYXMgKGUuZy4gZ3QteHMpXG4gICAgICovXG4gICAgZmluZEJ5QWxpYXMoYWxpYXM6IHN0cmluZyk6IE9wdGlvbmFsQnJlYWtQb2ludDtcbiAgICBmaW5kQnlRdWVyeShxdWVyeTogc3RyaW5nKTogT3B0aW9uYWxCcmVha1BvaW50O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgdGhlIGJyZWFrcG9pbnRzIHdob3NlIHJhbmdlcyBjb3VsZCBvdmVybGFwcGluZyBgbm9ybWFsYCByYW5nZXM7XG4gICAgICogZS5nLiBndC1zbSBvdmVybGFwcyBtZCwgbGcsIGFuZCB4bFxuICAgICAqL1xuICAgIHJlYWRvbmx5IG92ZXJsYXBwaW5nczogQnJlYWtQb2ludFtdO1xuICAgIC8qKlxuICAgICAqIEdldCBsaXN0IG9mIGFsbCByZWdpc3RlcmVkIChub24tZW1wdHkpIGJyZWFrcG9pbnQgYWxpYXNlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGFsaWFzZXM6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIEFsaWFzZXMgYXJlIG1hcHBlZCB0byBwcm9wZXJ0aWVzIHVzaW5nIHN1ZmZpeGVzXG4gICAgICogZS5nLiAgJ2d0LXNtJyBmb3IgcHJvcGVydHkgJ2xheW91dCcgIHVzZXMgc3VmZml4ICdHdFNtJ1xuICAgICAqIGZvciBwcm9wZXJ0eSBsYXlvdXRHdFNNLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN1ZmZpeGVzOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBNZW1vaXplZCBsb29rdXAgdXNpbmcgY3VzdG9tIHByZWRpY2F0ZSBmdW5jdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgZmluZFdpdGhQcmVkaWNhdGU7XG4gICAgLyoqXG4gICAgICogTWVtb2l6ZWQgQnJlYWtQb2ludCBMb29rdXBzXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaW5kQnlNYXA7XG59XG4iXX0=