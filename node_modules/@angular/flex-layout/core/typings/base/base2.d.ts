/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { StyleDefinition, StyleUtils } from '../style-utils/style-utils';
import { StyleBuilder } from '../style-builder/style-builder';
import { MediaMarshaller } from '../media-marshaller/media-marshaller';
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseDirective2 implements OnChanges, OnDestroy {
    protected elementRef: ElementRef;
    protected styleBuilder: StyleBuilder;
    protected styler: StyleUtils;
    protected marshal: MediaMarshaller;
    protected DIRECTIVE_KEY: string;
    protected inputs: string[];
    /** The most recently used styles for the builder */
    protected mru: StyleDefinition;
    protected destroySubject: Subject<void>;
    /** Access to host element's parent DOM node */
    protected readonly parentElement: HTMLElement | null;
    /** Access to the HTMLElement for the directive */
    protected readonly nativeElement: HTMLElement;
    /** Access to the activated value for the directive */
    activatedValue: string;
    /** Cache map for style computation */
    protected styleCache: Map<string, StyleDefinition>;
    protected constructor(elementRef: ElementRef, styleBuilder: StyleBuilder, styler: StyleUtils, marshal: MediaMarshaller);
    /** For @Input changes */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /** Register with central marshaller service */
    protected init(extraTriggers?: Observable<any>[]): void;
    /** Add styles to the element using predefined style builder */
    protected addStyles(input: string, parent?: Object): void;
    /** Remove generated styles from an element using predefined style builder */
    protected clearStyles(): void;
    /** Force trigger style updates on DOM element */
    protected triggerUpdate(): void;
    /**
     * Determine the DOM element's Flexbox flow (flex-direction).
     *
     * Check inline style first then check computed (stylesheet) style.
     * And optionally add the flow value to element's inline style.
     */
    protected getFlexFlowDirection(target: HTMLElement, addIfMissing?: boolean): string;
    /** Applies styles given via string pair or object map to the directive element */
    protected applyStyleToElement(style: StyleDefinition, value?: string | number, element?: HTMLElement): void;
    protected setValue(val: any, bp: string): void;
    protected updateWithValue(input: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseDirective2>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseDirective2, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZTIuZC50cyIsInNvdXJjZXMiOlsiYmFzZTIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3R5bGVEZWZpbml0aW9uLCBTdHlsZVV0aWxzIH0gZnJvbSAnLi4vc3R5bGUtdXRpbHMvc3R5bGUtdXRpbHMnO1xuaW1wb3J0IHsgU3R5bGVCdWlsZGVyIH0gZnJvbSAnLi4vc3R5bGUtYnVpbGRlci9zdHlsZS1idWlsZGVyJztcbmltcG9ydCB7IE1lZGlhTWFyc2hhbGxlciB9IGZyb20gJy4uL21lZGlhLW1hcnNoYWxsZXIvbWVkaWEtbWFyc2hhbGxlcic7XG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBCYXNlRGlyZWN0aXZlMiBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgc3R5bGVCdWlsZGVyOiBTdHlsZUJ1aWxkZXI7XG4gICAgcHJvdGVjdGVkIHN0eWxlcjogU3R5bGVVdGlscztcbiAgICBwcm90ZWN0ZWQgbWFyc2hhbDogTWVkaWFNYXJzaGFsbGVyO1xuICAgIHByb3RlY3RlZCBESVJFQ1RJVkVfS0VZOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGlucHV0czogc3RyaW5nW107XG4gICAgLyoqIFRoZSBtb3N0IHJlY2VudGx5IHVzZWQgc3R5bGVzIGZvciB0aGUgYnVpbGRlciAqL1xuICAgIHByb3RlY3RlZCBtcnU6IFN0eWxlRGVmaW5pdGlvbjtcbiAgICBwcm90ZWN0ZWQgZGVzdHJveVN1YmplY3Q6IFN1YmplY3Q8dm9pZD47XG4gICAgLyoqIEFjY2VzcyB0byBob3N0IGVsZW1lbnQncyBwYXJlbnQgRE9NIG5vZGUgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIC8qKiBBY2Nlc3MgdG8gdGhlIEhUTUxFbGVtZW50IGZvciB0aGUgZGlyZWN0aXZlICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIC8qKiBBY2Nlc3MgdG8gdGhlIGFjdGl2YXRlZCB2YWx1ZSBmb3IgdGhlIGRpcmVjdGl2ZSAqL1xuICAgIGFjdGl2YXRlZFZhbHVlOiBzdHJpbmc7XG4gICAgLyoqIENhY2hlIG1hcCBmb3Igc3R5bGUgY29tcHV0YXRpb24gKi9cbiAgICBwcm90ZWN0ZWQgc3R5bGVDYWNoZTogTWFwPHN0cmluZywgU3R5bGVEZWZpbml0aW9uPjtcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgc3R5bGVCdWlsZGVyOiBTdHlsZUJ1aWxkZXIsIHN0eWxlcjogU3R5bGVVdGlscywgbWFyc2hhbDogTWVkaWFNYXJzaGFsbGVyKTtcbiAgICAvKiogRm9yIEBJbnB1dCBjaGFuZ2VzICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKiogUmVnaXN0ZXIgd2l0aCBjZW50cmFsIG1hcnNoYWxsZXIgc2VydmljZSAqL1xuICAgIHByb3RlY3RlZCBpbml0KGV4dHJhVHJpZ2dlcnM/OiBPYnNlcnZhYmxlPGFueT5bXSk6IHZvaWQ7XG4gICAgLyoqIEFkZCBzdHlsZXMgdG8gdGhlIGVsZW1lbnQgdXNpbmcgcHJlZGVmaW5lZCBzdHlsZSBidWlsZGVyICovXG4gICAgcHJvdGVjdGVkIGFkZFN0eWxlcyhpbnB1dDogc3RyaW5nLCBwYXJlbnQ/OiBPYmplY3QpOiB2b2lkO1xuICAgIC8qKiBSZW1vdmUgZ2VuZXJhdGVkIHN0eWxlcyBmcm9tIGFuIGVsZW1lbnQgdXNpbmcgcHJlZGVmaW5lZCBzdHlsZSBidWlsZGVyICovXG4gICAgcHJvdGVjdGVkIGNsZWFyU3R5bGVzKCk6IHZvaWQ7XG4gICAgLyoqIEZvcmNlIHRyaWdnZXIgc3R5bGUgdXBkYXRlcyBvbiBET00gZWxlbWVudCAqL1xuICAgIHByb3RlY3RlZCB0cmlnZ2VyVXBkYXRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSBET00gZWxlbWVudCdzIEZsZXhib3ggZmxvdyAoZmxleC1kaXJlY3Rpb24pLlxuICAgICAqXG4gICAgICogQ2hlY2sgaW5saW5lIHN0eWxlIGZpcnN0IHRoZW4gY2hlY2sgY29tcHV0ZWQgKHN0eWxlc2hlZXQpIHN0eWxlLlxuICAgICAqIEFuZCBvcHRpb25hbGx5IGFkZCB0aGUgZmxvdyB2YWx1ZSB0byBlbGVtZW50J3MgaW5saW5lIHN0eWxlLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRGbGV4Rmxvd0RpcmVjdGlvbih0YXJnZXQ6IEhUTUxFbGVtZW50LCBhZGRJZk1pc3Npbmc/OiBib29sZWFuKTogc3RyaW5nO1xuICAgIC8qKiBBcHBsaWVzIHN0eWxlcyBnaXZlbiB2aWEgc3RyaW5nIHBhaXIgb3Igb2JqZWN0IG1hcCB0byB0aGUgZGlyZWN0aXZlIGVsZW1lbnQgKi9cbiAgICBwcm90ZWN0ZWQgYXBwbHlTdHlsZVRvRWxlbWVudChzdHlsZTogU3R5bGVEZWZpbml0aW9uLCB2YWx1ZT86IHN0cmluZyB8IG51bWJlciwgZWxlbWVudD86IEhUTUxFbGVtZW50KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2V0VmFsdWUodmFsOiBhbnksIGJwOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVXaXRoVmFsdWUoaW5wdXQ6IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=