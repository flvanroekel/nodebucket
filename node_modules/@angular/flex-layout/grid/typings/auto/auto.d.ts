/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef } from '@angular/core';
import { BaseDirective2, StyleUtils, StyleBuilder, MediaMarshaller } from '@angular/flex-layout/core';
import * as ɵngcc0 from '@angular/core';
export interface GridAutoParent {
    inline: boolean;
}
export declare class GridAutoStyleBuilder extends StyleBuilder {
    buildStyles(input: string, parent: GridAutoParent): {
        'display': string;
        'grid-auto-flow': string;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridAutoStyleBuilder>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GridAutoStyleBuilder>;
}
export declare class GridAutoDirective extends BaseDirective2 {
    protected elementRef: ElementRef;
    protected styleBuilder: GridAutoStyleBuilder;
    protected styler: StyleUtils;
    protected marshal: MediaMarshaller;
    inline: boolean;
    protected _inline: boolean;
    protected DIRECTIVE_KEY: string;
    constructor(elementRef: ElementRef, styleBuilder: GridAutoStyleBuilder, styler: StyleUtils, marshal: MediaMarshaller);
    protected updateWithValue(value: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridAutoDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GridAutoDirective, "grid-auto-directive", never, {
    "inline": "gdInline";
}, {}, never>;
}
/**
 * 'grid-auto-flow' CSS Grid styling directive
 * Configures the auto placement algorithm for the grid
 * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23
 */
export declare class DefaultGridAutoDirective extends GridAutoDirective {
    protected inputs: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultGridAutoDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DefaultGridAutoDirective, "  [gdAuto],  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]", never, {
    "gdAuto": "gdAuto";
    "gdAuto.xs": "gdAuto.xs";
    "gdAuto.sm": "gdAuto.sm";
    "gdAuto.md": "gdAuto.md";
    "gdAuto.lg": "gdAuto.lg";
    "gdAuto.xl": "gdAuto.xl";
    "gdAuto.lt-sm": "gdAuto.lt-sm";
    "gdAuto.lt-md": "gdAuto.lt-md";
    "gdAuto.lt-lg": "gdAuto.lt-lg";
    "gdAuto.lt-xl": "gdAuto.lt-xl";
    "gdAuto.gt-xs": "gdAuto.gt-xs";
    "gdAuto.gt-sm": "gdAuto.gt-sm";
    "gdAuto.gt-md": "gdAuto.gt-md";
    "gdAuto.gt-lg": "gdAuto.gt-lg";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by5kLnRzIiwic291cmNlcyI6WyJhdXRvLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlMiwgU3R5bGVVdGlscywgU3R5bGVCdWlsZGVyLCBNZWRpYU1hcnNoYWxsZXIgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgR3JpZEF1dG9QYXJlbnQge1xuICAgIGlubGluZTogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyaWRBdXRvU3R5bGVCdWlsZGVyIGV4dGVuZHMgU3R5bGVCdWlsZGVyIHtcbiAgICBidWlsZFN0eWxlcyhpbnB1dDogc3RyaW5nLCBwYXJlbnQ6IEdyaWRBdXRvUGFyZW50KToge1xuICAgICAgICAnZGlzcGxheSc6IHN0cmluZztcbiAgICAgICAgJ2dyaWQtYXV0by1mbG93Jzogc3RyaW5nO1xuICAgIH07XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHcmlkQXV0b0RpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUyIHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgc3R5bGVCdWlsZGVyOiBHcmlkQXV0b1N0eWxlQnVpbGRlcjtcbiAgICBwcm90ZWN0ZWQgc3R5bGVyOiBTdHlsZVV0aWxzO1xuICAgIHByb3RlY3RlZCBtYXJzaGFsOiBNZWRpYU1hcnNoYWxsZXI7XG4gICAgaW5saW5lOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfaW5saW5lOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBESVJFQ1RJVkVfS0VZOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgc3R5bGVCdWlsZGVyOiBHcmlkQXV0b1N0eWxlQnVpbGRlciwgc3R5bGVyOiBTdHlsZVV0aWxzLCBtYXJzaGFsOiBNZWRpYU1hcnNoYWxsZXIpO1xuICAgIHByb3RlY3RlZCB1cGRhdGVXaXRoVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG59XG4vKipcbiAqICdncmlkLWF1dG8tZmxvdycgQ1NTIEdyaWQgc3R5bGluZyBkaXJlY3RpdmVcbiAqIENvbmZpZ3VyZXMgdGhlIGF1dG8gcGxhY2VtZW50IGFsZ29yaXRobSBmb3IgdGhlIGdyaWRcbiAqIEBzZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvY29tcGxldGUtZ3VpZGUtZ3JpZC8jYXJ0aWNsZS1oZWFkZXItaWQtMjNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGVmYXVsdEdyaWRBdXRvRGlyZWN0aXZlIGV4dGVuZHMgR3JpZEF1dG9EaXJlY3RpdmUge1xuICAgIHByb3RlY3RlZCBpbnB1dHM6IHN0cmluZ1tdO1xufVxuIl19