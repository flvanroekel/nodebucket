/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnChanges, SimpleChanges, AfterViewInit } from '@angular/core';
import { BaseDirective2, LayoutConfigOptions, MediaMarshaller, StyleUtils, StyleBuilder } from '@angular/flex-layout/core';
import * as ɵngcc0 from '@angular/core';
export interface ShowHideParent {
    display: string;
}
export declare class ShowHideStyleBuilder extends StyleBuilder {
    buildStyles(show: string, parent: ShowHideParent): {
        'display': string;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShowHideStyleBuilder>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ShowHideStyleBuilder>;
}
export declare class ShowHideDirective extends BaseDirective2 implements AfterViewInit, OnChanges {
    protected elementRef: ElementRef;
    protected styleBuilder: ShowHideStyleBuilder;
    protected styler: StyleUtils;
    protected marshal: MediaMarshaller;
    protected layoutConfig: LayoutConfigOptions;
    protected platformId: Object;
    protected serverModuleLoaded: boolean;
    protected DIRECTIVE_KEY: string;
    /** Original dom Elements CSS display style */
    protected display: string;
    protected hasLayout: boolean;
    protected hasFlexChild: boolean;
    constructor(elementRef: ElementRef, styleBuilder: ShowHideStyleBuilder, styler: StyleUtils, marshal: MediaMarshaller, layoutConfig: LayoutConfigOptions, platformId: Object, serverModuleLoaded: boolean);
    ngAfterViewInit(): void;
    /**
     * On changes to any @Input properties...
     * Default to use the non-responsive Input value ('fxShow')
     * Then conditionally override with the mq-activated Input's current value
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     *  Watch for these extra triggers to update fxShow, fxHide stylings
     */
    protected trackExtraTriggers(): void;
    /**
     * Override accessor to the current HTMLElement's `display` style
     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'
     * unless it was already explicitly specified inline or in a CSS stylesheet.
     */
    protected getDisplayStyle(): string;
    /** Validate the visibility value and then update the host's inline display style */
    protected updateWithValue(value?: boolean | string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShowHideDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ShowHideDirective, "show-hide-directive", never, {}, {}, never>;
}
/**
 * 'show' Layout API directive
 */
export declare class DefaultShowHideDirective extends ShowHideDirective {
    protected inputs: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultShowHideDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DefaultShowHideDirective, "  [fxShow], [fxShow.print],  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],  [fxHide], [fxHide.print],  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]", never, {
    "fxShow": "fxShow";
    "fxShow.print": "fxShow.print";
    "fxShow.xs": "fxShow.xs";
    "fxShow.sm": "fxShow.sm";
    "fxShow.md": "fxShow.md";
    "fxShow.lg": "fxShow.lg";
    "fxShow.xl": "fxShow.xl";
    "fxShow.lt-sm": "fxShow.lt-sm";
    "fxShow.lt-md": "fxShow.lt-md";
    "fxShow.lt-lg": "fxShow.lt-lg";
    "fxShow.lt-xl": "fxShow.lt-xl";
    "fxShow.gt-xs": "fxShow.gt-xs";
    "fxShow.gt-sm": "fxShow.gt-sm";
    "fxShow.gt-md": "fxShow.gt-md";
    "fxShow.gt-lg": "fxShow.gt-lg";
    "fxHide": "fxHide";
    "fxHide.print": "fxHide.print";
    "fxHide.xs": "fxHide.xs";
    "fxHide.sm": "fxHide.sm";
    "fxHide.md": "fxHide.md";
    "fxHide.lg": "fxHide.lg";
    "fxHide.xl": "fxHide.xl";
    "fxHide.lt-sm": "fxHide.lt-sm";
    "fxHide.lt-md": "fxHide.lt-md";
    "fxHide.lt-lg": "fxHide.lt-lg";
    "fxHide.lt-xl": "fxHide.lt-xl";
    "fxHide.gt-xs": "fxHide.gt-xs";
    "fxHide.gt-sm": "fxHide.gt-sm";
    "fxHide.gt-md": "fxHide.gt-md";
    "fxHide.gt-lg": "fxHide.gt-lg";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLmQudHMiLCJzb3VyY2VzIjpbInNob3ctaGlkZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1BIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUyLCBMYXlvdXRDb25maWdPcHRpb25zLCBNZWRpYU1hcnNoYWxsZXIsIFN0eWxlVXRpbHMsIFN0eWxlQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuZXhwb3J0IGludGVyZmFjZSBTaG93SGlkZVBhcmVudCB7XG4gICAgZGlzcGxheTogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2hvd0hpZGVTdHlsZUJ1aWxkZXIgZXh0ZW5kcyBTdHlsZUJ1aWxkZXIge1xuICAgIGJ1aWxkU3R5bGVzKHNob3c6IHN0cmluZywgcGFyZW50OiBTaG93SGlkZVBhcmVudCk6IHtcbiAgICAgICAgJ2Rpc3BsYXknOiBzdHJpbmc7XG4gICAgfTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNob3dIaWRlRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZTIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBzdHlsZUJ1aWxkZXI6IFNob3dIaWRlU3R5bGVCdWlsZGVyO1xuICAgIHByb3RlY3RlZCBzdHlsZXI6IFN0eWxlVXRpbHM7XG4gICAgcHJvdGVjdGVkIG1hcnNoYWw6IE1lZGlhTWFyc2hhbGxlcjtcbiAgICBwcm90ZWN0ZWQgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zO1xuICAgIHByb3RlY3RlZCBwbGF0Zm9ybUlkOiBPYmplY3Q7XG4gICAgcHJvdGVjdGVkIHNlcnZlck1vZHVsZUxvYWRlZDogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgRElSRUNUSVZFX0tFWTogc3RyaW5nO1xuICAgIC8qKiBPcmlnaW5hbCBkb20gRWxlbWVudHMgQ1NTIGRpc3BsYXkgc3R5bGUgKi9cbiAgICBwcm90ZWN0ZWQgZGlzcGxheTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBoYXNMYXlvdXQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGhhc0ZsZXhDaGlsZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBzdHlsZUJ1aWxkZXI6IFNob3dIaWRlU3R5bGVCdWlsZGVyLCBzdHlsZXI6IFN0eWxlVXRpbHMsIG1hcnNoYWw6IE1lZGlhTWFyc2hhbGxlciwgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHNlcnZlck1vZHVsZUxvYWRlZDogYm9vbGVhbik7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT24gY2hhbmdlcyB0byBhbnkgQElucHV0IHByb3BlcnRpZXMuLi5cbiAgICAgKiBEZWZhdWx0IHRvIHVzZSB0aGUgbm9uLXJlc3BvbnNpdmUgSW5wdXQgdmFsdWUgKCdmeFNob3cnKVxuICAgICAqIFRoZW4gY29uZGl0aW9uYWxseSBvdmVycmlkZSB3aXRoIHRoZSBtcS1hY3RpdmF0ZWQgSW5wdXQncyBjdXJyZW50IHZhbHVlXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogIFdhdGNoIGZvciB0aGVzZSBleHRyYSB0cmlnZ2VycyB0byB1cGRhdGUgZnhTaG93LCBmeEhpZGUgc3R5bGluZ3NcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdHJhY2tFeHRyYVRyaWdnZXJzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgYWNjZXNzb3IgdG8gdGhlIGN1cnJlbnQgSFRNTEVsZW1lbnQncyBgZGlzcGxheWAgc3R5bGVcbiAgICAgKiBOb3RlOiBTaG93L0hpZGUgd2lsbCBub3QgY2hhbmdlIHRoZSBkaXNwbGF5IHRvICdmbGV4JyBidXQgd2lsbCBzZXQgaXQgdG8gJ2Jsb2NrJ1xuICAgICAqIHVubGVzcyBpdCB3YXMgYWxyZWFkeSBleHBsaWNpdGx5IHNwZWNpZmllZCBpbmxpbmUgb3IgaW4gYSBDU1Mgc3R5bGVzaGVldC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0RGlzcGxheVN0eWxlKCk6IHN0cmluZztcbiAgICAvKiogVmFsaWRhdGUgdGhlIHZpc2liaWxpdHkgdmFsdWUgYW5kIHRoZW4gdXBkYXRlIHRoZSBob3N0J3MgaW5saW5lIGRpc3BsYXkgc3R5bGUgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlV2l0aFZhbHVlKHZhbHVlPzogYm9vbGVhbiB8IHN0cmluZyk6IHZvaWQ7XG59XG4vKipcbiAqICdzaG93JyBMYXlvdXQgQVBJIGRpcmVjdGl2ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEZWZhdWx0U2hvd0hpZGVEaXJlY3RpdmUgZXh0ZW5kcyBTaG93SGlkZURpcmVjdGl2ZSB7XG4gICAgcHJvdGVjdGVkIGlucHV0czogc3RyaW5nW107XG59XG4iXX0=